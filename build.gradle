plugins {
	id "java"
	id "java-library"
	id "maven-publish"
	id "eclipse"
	id "net.minecrell.licenser" version "0.4.1"
}

sourceCompatibility = 1.8

def ENV = System.getenv()
version = version + (System.getenv("GITHUB_ACTIONS") ? "" : "+local")

group = 'org.quiltmc'
archivesBaseName = project.name.toLowerCase()

repositories {
	mavenCentral()

	maven {
		url = "https://maven.quiltmc.org/repository/release/"
	}

	// TODO: Republish procyon under our name for enigma
	maven {
		url = "https://maven.fabricmc.net/"
		content {
			includeGroup("net.fabricmc") // I'd like to deprecate procyon, so we don't need to maintain it
			includeGroup("cuchaz")
		}
	}
}

configurations {
	ship
	enigma
	implementation.extendsFrom ship
	compileOnly.extendsFrom enigma
	testImplementation.extendsFrom enigma
}

dependencies {
	def asmVersion = "9.1"

	ship "org.ow2.asm:asm:$asmVersion"
	ship "org.ow2.asm:asm-commons:$asmVersion"
	ship "org.ow2.asm:asm-tree:$asmVersion"
	ship "org.ow2.asm:asm-util:$asmVersion"
	ship "org.quiltmc:tiny-mappings-parser:0.3.0"
	implementation "com.google.guava:guava:28.0-jre"
	compileOnly "org.jetbrains:annotations:20.1.0"
	enigma "cuchaz:enigma:0.23.2"

	testImplementation "org.junit.jupiter:junit-jupiter-api:5.3.1"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.3.1"
}

// TODO: Move to spotless
license {
	header project.file("HEADER")
	include "**/*.java"
}

jar {
	manifest {
		attributes 'Implementation-Title': 'Stitch',
				'Implementation-Version': version,
				'Main-Class': "net.fabricmc.stitch.Main"
	}
}

task allJar(type: Jar) {
	from {
		configurations.ship.collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}
	manifest {
		attributes 'Implementation-Title': 'Stitch',
				'Implementation-Version': archiveVersion,
				'Main-Class': "net.fabricmc.stitch.Main"
	}
	archiveClassifier = 'all'
	with jar
}

artifacts {
	archives allJar
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"

	if (JavaVersion.current().isJava9Compatible()) {
		it.options.release = 8
	}
}

java {
	withSourcesJar()
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact(allJar)
		}
	}

	// select the repositories you want to publish to
	repositories {
		if (ENV.MAVEN_URL) {
			maven {
				url ENV.MAVEN_URL
				credentials {
					username ENV.MAVEN_USERNAME
					password ENV.MAVEN_PASSWORD
				}
			}
		}
	}
}

test {
	useJUnitPlatform()
}
